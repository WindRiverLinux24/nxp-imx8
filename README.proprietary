1.0 common configuration
------------------------
# All private packages of imx require the following configuration
BB_NO_NETWORK = '0'
ACCEPT_FSL_EULA = "1"
LICENSE_FLAGS_ACCEPTED:append = " commercial"

BSP_NXP_DERIVED:append:nxp-imx8  = " nxp-imx8"
DISTROOVERRIDES:nxp-imx8 = "fsl fslc"

2.1 GPU
-------
Because of the licesen issue, nxp-imx8 layer doesn't integrate imx8's GPU(GC7000Lite) or VPU
hardware acceleration related packages into WRlinux product. So, if customer wants
to run hardware graphic feature. Detail steps as below:

2.1.1 The common configurations for all boards:

PREFERRED_PROVIDER_virtual/egl:imxgpu        ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgl:imxgpu    ?= "mesa-gl"
PREFERRED_PROVIDER_virtual/mesa:imxgpu    ?= "mesa-gl"
PREFERRED_PROVIDER_virtual/libgles1:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles2:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles3:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libg2d            ?= "imx-gpu-g2d"
PREFERRED_PROVIDER_virtual/opencl-icd:imxgpu ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-clhpp:imxgpu       ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-headers:imxgpu     ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-icd-loader:imxgpu  ?= "imx-gpu-viv"
PREFERRED_VERSION_vulkan-headers:mx8  = "1.3.275.0.imx"
PREFERRED_VERSION_vulkan-loader:mx8 = "1.3.275.0.imx"
PREFERRED_VERSION_libdrm:mx8 = "2.4.116.imx"
PREFERRED_VERSION_wayland-protocols:mx8 = "1.32.imx"
PREFERRED_VERSION_weston:mx8 = "12.0.4.imx"
PREFERRED_VERSION_ffmpeg:mx8 = "4.4.1"
PREFERRED_VERSION_opencv:mx8 = "4.10.0.imx"

PREFERRED_VERSION_gstreamer1.0-plugins-base:mx8 = "1.24.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-bad:mx8  = "1.24.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-good:mx8 = "1.24.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-good-qt:mx8 = "1.24.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-ugly:mx8 = "1.22.12"
PREFERRED_VERSION_gstreamer1.0:mx8              = "1.24.0.imx"
PREFERRED_VERSION_gstreamer1.0-libav:mx8        = "1.22.12"
LICENSE_FLAGS_ACCEPTED += "commercial"

PREFERRED_VERSION_xwayland:mx8                  = "23.1.1.imx"

DISTRO_FEATURES:remove = "directfb "
DISTRO_FEATURES:append = " wayland pam"

MACHINE_HAS_VIVANTE_KERNEL_DRIVER_SUPPORT = "1"
IMAGE_FEATURES:remove = "x11-base  x11-sato"
IMAGE_FEATURES:append = " weston"

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths"
WARN_QA:remove = "${WARN_TO_ERROR_QA}"
ERROR_QA:append = " ${WARN_TO_ERROR_QA}"

CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-base'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-good'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-bad'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gst1.0-plugin'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-parser'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-codec'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-vpuwrap'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dsp'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dsp-codec-ext'
CUSTOMER_RECIPES:freescale-layer += 'gstreamer1.0-plugins-imx'
CUSTOMER_RECIPES:freescale-layer += 'libimxdmabuffer'
CUSTOMER_RECIPES:freescale-layer += 'libimxvpuapi'
CUSTOMER_RECIPES:freescale-layer += 'libimxvpuapi2'
CUSTOMER_RECIPES:freescale-layer += 'tinycompress'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-vpu-hantro-vc'

CUSTOMER_RECIPES:openembedded-layer += 'freeglut'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-g2d-samples'
CUSTOMER_RECIPES:fsl-bsp-release += 'mesa'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv-demos'
CUSTOMER_RECIPES:fsl-sdk-release += 'imx-gpu-sdk'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += "imx-vpu-hantro"
CUSTOMER_RECIPES:fsl-bsp-release += "imx-vpu-hantro-daemon"
CUSTOMER_RECIPES:freescale-distro += 'assimp'
CUSTOMER_RECIPES:freescale-distro += 'devil'
CUSTOMER_RECIPES:freescale-layer += 'imx-gpu-apitrace'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-opencl-converter'
CUSTOMER_RECIPES:fsl-bsp-release += 'pugixml'
CUSTOMER_RECIPES:fsl-bsp-release += 'systemd-gpuconfig'
CUSTOMER_RECIPES:fsl-bsp-release += 'fmt'
CUSTOMER_RECIPES:fsl-bsp-release += 'systemd'
CUSTOMER_RECIPES:freescale-layer += 'ffmpeg'
CUSTOMER_RECIPES:fsl-bsp-release += 'opencv'
CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'
CUSTOMER_RECIPES:openembedded-layer += 'ccid'
CUSTOMER_RECIPES:openembedded-layer += 'pcsc-lite'
CUSTOMER_RECIPES:openembedded-layer += 'spirv-tools'
CUSTOMER_RECIPES:freescale-distro += 'glslang'
CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'
CUSTOMER_RECIPES:fsl-bsp-release += 'libdrm'
CUSTOMER_RECIPES:openembedded-layer += 'nlohmann-json'
CUSTOMER_RECIPES:openembedded-layer += 'googletest'
CUSTOMER_RECIPES:openembedded-layer += 'rapidjson'
CUSTOMER_RECIPES:openembedded-layer += 'glm'
CUSTOMER_RECIPES:freescale-distro += 'stb'
CUSTOMER_RECIPES:fsl-sdk-release += 'rapidvulkan'
CUSTOMER_RECIPES:freescale-distro += 'rapidopencl'
CUSTOMER_RECIPES:freescale-distro += 'half'
CUSTOMER_RECIPES:fsl-sdk-release += 'gli'
CUSTOMER_RECIPES:freescale-distro += 'rapidopenvx'
CUSTOMER_RECIPES:fsl-sdk-release += 'vulkan-validationlayers'
CUSTOMER_RECIPES:fsl-bsp-release += 'linux-imx-headers'
CUSTOMER_RECIPES:freescale-layer += 'vulkan-headers'
CUSTOMER_RECIPES:freescale-layer += 'vulkan-loader'
CUSTOMER_RECIPES:openembedded-layer += 'vulkan-tools'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston-init'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston'
CUSTOMER_RECIPES:openembedded-layer += 'libxaw'
CUSTOMER_RECIPES:openembedded-layer += 'freerdp'
CUSTOMER_RECIPES:openembedded-layer += 'xterm'
CUSTOMER_RECIPES:meta-python += 'python3-wheel'
CUSTOMER_RECIPES:meta-python += 'python3-pip'
CUSTOMER_RECIPES:meta-python += 'python3-pybind11'
CUSTOMER_RECIPES:meta-python += 'python3-h5py'
CUSTOMER_RECIPES:meta-python += 'python3-keras-applications'
CUSTOMER_RECIPES:meta-python += 'python3-keras-preprocessing'
CUSTOMER_RECIPES:meta-python += 'python3-pkgconfig'
CUSTOMER_RECIPES:meta-tensorflow += 'bazel'
CUSTOMER_RECIPES:meta-tensorflow += 'openjdk-11'
CUSTOMER_RECIPES:openembedded-layer += 'hdf5'
CUSTOMER_RECIPES:imx-machine-learning += 'nn-imx'
CUSTOMER_RECIPES:imx-machine-learning += 'tensorflow-lite-host-tools'
CUSTOMER_RECIPES:imx-machine-learning += 'tensorflow-protobuf'
CUSTOMER_RECIPES:imx-machine-learning += 'tensorflow-lite'
CUSTOMER_RECIPES:imx-machine-learning += 'flatbuffers'
CUSTOMER_RECIPES:imx-machine-learning += 'nnstreamer'
CUSTOMER_RECIPES:imx-machine-learning += 'ssat'
CUSTOMER_RECIPES:openembedded-layer += 'giflib'
CUSTOMER_RECIPES:openembedded-layer += 'leptonica'
CUSTOMER_RECIPES:openembedded-layer += 'tesseract'
CUSTOMER_RECIPES:openembedded-layer += 'tesseract-lang'
CUSTOMER_RECIPES:openembedded-layer += 'ade'
CUSTOMER_RECIPES:openembedded-layer += 'v4l-utils'
CUSTOMER_RECIPES:openembedded-layer += 'tbb'
CUSTOMER_RECIPES:multimedia-layer += 'gst-shark'
CUSTOMER_RECIPES:fsl-sdk-release += 'libxdg-shell'
CUSTOMER_RECIPES:freescale-layer += 'mxsldr'
CUSTOMER_RECIPES:freescale-layer += 'xwayland'
CUSTOMER_RECIPES:freescale-layer += 'libimxdmabuffer'
CUSTOMER_RECIPES:freescale-layer += 'imx-usb-loader'
CUSTOMER_RECIPES:openembedded-layer += 'fftw'
CUSTOMER_RECIPES:openembedded-layer += 'imagemagick'

2.1.2 The specific configurations for i.MX8QM or i.MX8MQ:

MACHINEOVERRIDES:prepend:nxp-imx8 = "mx8:mx8m:mx8qm:mx8mq:imxdrm:imxdpu:imxdcss:imxvpu:imxvpuhantro:imxgpu:imxgpu2d:imxgpu3d:mx8-nxp-bsp:imx-nxp-sdk:use-nxp-bsp:mx8mq-nxp-bsp:mx8qm-nxp-bsp:imxvulkan:mx8-generic-bsp:mx8qm-generic-bsp:"
IMAGE_INSTALL:append = " assimp devil imx-gpu-viv imx-gpu-sdk imx-gpu-viv-demos weston weston-init imx-dpu-g2d imx-vpu-hantro imx-gpu-apitrace weston-xwayland imx-g2d-samples gstreamer1.0 gstreamer1.0-plugins-base  gstreamer1.0-plugins-good imx-gst1.0-plugin gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav"

PREFERRED_PROVIDER_virtual/libg2d:imxdpu     ?= "imx-dpu-g2d"

2.1.3 VPU test

For imx8mq: vpudec
	gst-launch-1.0 filesrc location=test.mp4 typefind=true ! video/quicktime ! aiurdemux ! queue max-size-time=0 ! vpudec ! autovideosink


2.2 machine learning
--------------------

Add the following steps on the basis of graphic:

<1> Append the following packages to IMAGE_INSTALL:

On the basis of the above graphic steps:
MACHINEOVERRIDES:prepend:nxp-imx8 = "use-nxp-bsp:"
IMAGE_INSTALL:append = " gstreamer1.0 gstreamer1.0-plugins-base  gstreamer1.0-plugins-good tensorflow-lite nnstreamer imx-gst1.0-plugin gstreamer1.0-plugins-bad packagegroup-imx-ml onnxruntime tensorflow-lite-vx-delegate gstreamer1.0-rtsp-server gstreamer1.0-plugins-ugly gstreamer1.0-libav"

<2> Append the following packages to CUSTOMER_RECIPES:

CUSTOMER_RECIPES:imx-machine-learning += 'nnstreamer-edge'
CUSTOMER_RECIPES:fsl-sdk-release += 'tinycompress'
CUSTOMER_RECIPES:imx-machine-learning += 'packagegroup-imx-ml'
CUSTOMER_RECIPES:imx-machine-learning += 'onnxruntime'
CUSTOMER_RECIPES:imx-machine-learning += 'tensorflow-lite-vx-delegate'
CUSTOMER_RECIPES:imx-machine-learning += 'pytorch'
CUSTOMER_RECIPES:imx-machine-learning += 'nnshark'
CUSTOMER_RECIPES:imx-machine-learning += 'torchvision'
CUSTOMER_RECIPES:imx-machine-learning += 'modelrunner'
CUSTOMER_RECIPES:imx-machine-learning += 'tvm'
CUSTOMER_RECIPES:imx-machine-learning += 'deepview-rt'
CUSTOMER_RECIPES:imx-machine-learning += 'tim-vx'
CUSTOMER_RECIPES:imx-machine-learning += 'arm-compute-library'
CUSTOMER_RECIPES:imx-machine-learning += 'deepview-rt-examples'
CUSTOMER_RECIPES:imx-machine-learning += 'nnstreamer-protobuf'
CUSTOMER_RECIPES:fsl-sdk-release += 'libgpuperfcnt'
CUSTOMER_RECIPES:meta-python += 'python3-future'
CUSTOMER_RECIPES:meta-python += 'python3-decorator'
CUSTOMER_RECIPES:meta-python += 'python3-mpmath'
CUSTOMER_RECIPES:meta-python += 'python3-sympy'
CUSTOMER_RECIPES:meta-python += 'python3-coloredlogs'
CUSTOMER_RECIPES:meta-python += 'python3-humanfriendly'
PREFERRED_VERSION_tensorflow-lite:mx8 = "2.16.2"

<3> Use the command as below to build a xwayland image:

        bitbake wrlinux-image-std-sato

<4> downlaod these packeges below:

root:~# wget https://github.com/google-coral/test_data/raw/master/ssd_mobilenet_v2_coco_quant_postprocess.tflite
root:~# wget https://github.com/google-coral/test_data/raw/master/coco_labels.txt
root:~# export MODEL=$(pwd)/ssd_mobilenet_v2_coco_quant_postprocess.tflite
root:~# export LABELS=$(pwd)/coco_labels.txt

<6> Execute the following command:

gst-launch-1.0 --no-position v4l2src device=/dev/${capture device} ! video/x-raw,width=640,height=480,framerate=30/1 ! tee name=t t. ! queue max-size-buffers=2 leaky=2 ! imxvideoconvert_g2d ! video/x-raw,width=300,height=300,format=RGBA ! videoconvert ! video/x-raw,format=RGB ! tensor_converter ! tensor_filter framework=tensorflow-lite accelerator=true:gpu model=${pwd}/ssd_mobilenet_v2_coco_quant_postprocess.tflite custom=Delegate:NNAPI ! tensor_decoder mode=bounding_boxes option1=tf-ssd option2=${pwd}/coco_labels.txt option3=0:1:2:3,50 option4=640:480 option5=300:300 ! mix. t. ! queue max-size-buffers=2 ! imxcompositor_g2d name=mix sink_0::zorder=2 sink_1::zorder=1 ! waylandsink


2.5 Build Bootloader
--------------------

Because of license limitation, the NXP imx8 bootloader is not supported on WRLinux product.
But the necessary recipe files of building bootloader have been integrated into WRLinux product. In this way,
the customers can build bootloader for NXP imx8 platform based on WRLinux product by themselves.
To build bootloader image for NXP imx8 platform, it only needs to add below contents in local.conf file,
and then build WRLinux image as usual.

Prepare the bootloader image imx-boot-nxp-imx8-${machine}.bin-flash

2.5.1 Common configurations for all boards
------------------------------------------

ACCEPT_FSL_EULA = "1"
LICENSE_FLAGS_ACCEPTED:append = "commercial"

CUSTOMER_BUILD_BOOTLOADER = "1"
BSP_NXP_DERIVED:append=" nxp-imx8"

IMAGE_INSTALL:append = " imx-boot"

PREFERRED_PROVIDER_virtual/bootloader:mx8 = "u-boot-imx"
CUSTOMER_RECIPES:fsl-bsp-release += 'u-boot-imx'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-atf'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-mkimage'

2.5.2 Specific configurations for imx8qm
----------------------------------------

MACHINEOVERRIDES:prepend = "mx8qm:mx8qm-nxp-bsp:mx8-generic-bsp:mx8qm-generic-bsp:"

IMX_EXTRA_FIRMWARE:mx8-generic-bsp = "imx-boot-firmware-files imx-sc-firmware imx-seco"
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot-firmware-files'
CUSTOMER_RECIPES:freescale-layer += 'imx-sc-firmware'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-seco'
CUSTOMER_RECIPES:freescale-layer += 'imx-m4-demos'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot'
PREFERRED_VERSION_imx-m4-demos:mx8qm-nxp-bsp = "2.9.0"
PREFERRED_VERSION_imx-seco:mx8 = "5.9.2"
IMX_SOC_REV_LOWER = "b0"

UBOOT_CONFIG ??= "mx8qmmek"
UBOOT_CONFIG[mx8qmmek] = "imx8qm_mek_defconfig,sdcard"

IMAGE_BOOT_FILES:append = " hdmitxfw.bin hdmirxfw.bin dpfw.bin"
IMX_DEFAULT_BOOTLOADER:use-nxp-bsp ="u-boot-imx"
IMX_DEFAULT_BOOTLOADER:use-mainline-bsp ="u-boot-fslc"

# Set ATF platform name
ATF_PLATFORM = "imx8qm"

IMX_BOOT_SOC_TARGET = "iMX8QM"

UBOOT_MAKE_TARGET = \
    "${@bb.utils.contains('MACHINE_FEATURES', 'optee', '', \
                                                       'u-boot.bin', d)}"
SPL_BINARY = \
    "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'spl/u-boot-spl.bin', \
                                                       '', d)}"

IMXBOOT_TARGETS_SD = \
     "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'flash_spl', \
                                                        'flash flash_ca72', d)}"
IMXBOOT_TARGETS_FSPI=\
     "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'flash_spl_flexspi', \
                                                        'flash_flexspi', d)}"
IMXBOOT_TARGETS = \
     "${@bb.utils.contains('UBOOT_CONFIG', 'mx8qmmek', '${IMXBOOT_TARGETS_SD}', \
                                                        '${IMXBOOT_TARGETS_FSPI}', d)}"

CUSTOMER_RECIPES:meta-arm += 'arm-ffa-user arm-tstee libts'
IMAGE_INSTALL:append = " libts"

2.5.3 Specific configurations for imx8mq
----------------------------------------

MACHINEOVERRIDES:prepend = "mx8m:mx8mq:mx8mq-nxp-bsp:mx8m-generic-bsp:mx8mq-generic-bsp:"

IMX_EXTRA_FIRMWARE:mx8-generic-bsp = "imx-boot-firmware-files"
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot-firmware-files'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-m4-demos'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot'

CUSTOMER_RECIPES:fsl-bsp-release += 'firmware-imx-8m'

UBOOT_SUFFIX = "bin"

UBOOT_CONFIG ??= "mx8mqevk"
UBOOT_CONFIG[mx8mqevk]       = "imx8mq_evk_config,sdcard"

SPL_BINARY = "spl/u-boot-spl.bin"

OPTEE_BOOT_IMAGE:mx8-nxp-bsp ?= "tee.bin"

IMAGE_BOOT_FILES:append:imx8mq-evk = " \
    imx8mq_m4_TCM_hello_world.bin \
    imx8mq_m4_TCM_rpmsg_lite_pingpong_rtos_linux_remote.bin \
    imx8mq_m4_TCM_rpmsg_lite_str_echo_rtos.bin \
"
# Set DDR FIRMWARE
DDR_FIRMWARE_NAME = " \
    lpddr4_pmu_train_1d_imem.bin \
    lpddr4_pmu_train_1d_dmem.bin \
    lpddr4_pmu_train_2d_imem.bin \
    lpddr4_pmu_train_2d_dmem.bin \
"

UBOOT_DTB_NAME = "imx8mq-evk.dtb"

ATF_PLATFORM = "imx8mq"

SOC_ATF_BOOT_UART_BASE:mx8mq-generic-bsp="0x30860000"
ATF_BOOT_UART_BASE               = "${SOC_ATF_BOOT_UART_BASE}"

IMXBOOT_TARGETS = "flash_evk flash_evk_no_hdmi flash_dp_evk"
IMX_BOOT_SOC_TARGET = "iMX8M"

UBOOT_EXTLINUX:use-mainline-bsp = "1"

LOADADDR = ""
UBOOT_MAKE_TARGET = ""
IMX_BOOT_SEEK = "33"

OPTEE_BIN_EXT = "8mq"

2.6 VPU firmware(MX8QM)
-----------------------

MACHINEOVERRIDES:prepend:nxp-imx8 = "mx8qm-nxp-bsp:"
IMAGE_INSTALL:append = " firmware-imx-vpu-amphion"
CUSTOMER_RECIPES:fsl-bsp-release += "firmware-imx"
